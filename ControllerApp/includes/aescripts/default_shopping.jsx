//include our global functions/ helpers#include '30_PP_Globals.jsx';function default_shopping(opts){     var console = new Console();     app.beginSuppressDialogs();  //suppress dialogs from AE      //$.writeln(JSON.stringify(opts.data))    //handle aep project    closeCurrentProject();    openProject(opts.template);        var project = app.project;        //setup our comps    var comps = new Compositions();    comps.setup(project)    //$.writeln(comps.all)            //create a new Object with our Composition Names    var newData = {};        //iterate through each of our data objects to create the composition structure    for(var key in opts.data){                //$.writeln(key)                //handle location and multitext different than the others because they are                 if( key.indexOf("location")>=0 || key.indexOf("multitext") >=0){                            for(var i =0;i<opts.data[key].length;i++){                                    for(var j =0; j<opts.data[key][i].length;j++){                                            var newKey = key+"_"+i+"_"+j;                                            newData[newKey] = opts.data[key][i][j];                                        }                                }                }else{                    for(var i =0; i<opts.data[key].length;i++){                        var newKey = key+"_"+i;                        newData[newKey] = opts.data[key][i]                        }                                }    }        //$.writeln(JSON.stringify(newData))    //console.log("test")    var TextRects = [];    for(var key in newData){            if(key.indexOf("multitext")>=0){                var selectedComp = comps.byName(key);                if(selectedComp){                     //$.writeln("Found Comp: "+key)                    if(key.indexOf('image') >= 0 ){                    }else if(key.indexOf('text')>=0){                        $.writeln(newData[key])                                                                           selectedComp.item.layer(1).property("Source Text").setValue(newData[key])                         //change the                          var modifier = selectedComp.item.layer(1).property("Source Text").value                         modifier.justification = ParagraphJustification.LEFT_JUSTIFY                         selectedComp.item.layer(1).property("Source Text").setValue(modifier)                                                                   var textRect = selectedComp.item.layer(1).sourceRectAtTime(0, false);                         var t = {}                         t[key]=textRect                         t[key].top = Math.ceil(t[key].top)                         t[key].left = Math.ceil(t[key].left)                         t[key].width = Math.ceil(t[key].width)                         t[key].height = Math.ceil(t[key].height)                         TextRects.push(t)                         //alert(textRect.top + " " + textRect.left + " " + textRect.width + " " + textRect.height);                         //$.writeln(Math.ceil(textRect.width))                                            }               }              }     }          //loop through multitext and set pos     var multiTextComp = comps.byName('Multitext_gastronomy');     if(multiTextComp){ 		console.log("Comp Width:"+ multiTextComp.item.width) 		var default_space = 500;//amount of space between texts 		var current_pos = 0; 		for(var i = 0; i<TextRects.length;i++){     		for(var key in TextRects[i] ){	     		var comp = comps.byName(key);	     						console.log(comp.item.layer(1).property("Source Text").value.text)				console.log(i+" : "+key+" : "+JSON.stringify(TextRects[i][key]))		     			     		//printItemInfo(multiTextComp.item.layer(i+1))	     		var layerNum = parseInt(i)+1;	     		if( layerNum <= multiTextComp.item.numLayers){	     			console.log("Layer: "+layerNum+" Index: "+i)	     			//set our anchor position                    var anchor = [0, multiTextComp.item.layer(layerNum).height/2]	     			multiTextComp.item.layer(layerNum).property("Anchor Point").setValue(anchor)	     				     			//calculate the position	     			var y = multiTextComp.item.layer(layerNum).property("Position").value[1]	     				     			//setup our x pos - if its the first layer then default	     			var x = (i>0)? current_pos+default_space : (default_space/2)	     			current_pos = x+TextRects[i][key].width	     				     			var pos = [x,y,0]	     			multiTextComp.item.layer(layerNum).property("Position").setValue(pos)	     			if(layerNum ==multiTextComp.item.numLayers){		     			multiTextComp.item.width=current_pos+(default_space/2)	     			}	     		}     		}//end for(var key in TextRects[i] 		}//end for(var i =0; i<TextRects.length;i++)     }//end if(multiTextComp)          //sequence text and images     //support for locations as well.     for(var key in newData){	     if(key.indexOf('sequence')>=0){		     //modify sequence text		     var selectedComp = comps.byName(key);		     console.log(key)		     console.log(typeof selectedComp)		     		     if(selectedComp){		     	console.log('yes')			    if(key.indexOf('image') >= 0 ){			    	console.log("image")			    	console.log(opts.asset_loc+newData[key])			    	var file_loc = opts.asset_loc+newData[key]                    selectedComp.item.layer(1).source.replace(new File(file_loc))                }else if(key.indexOf('text')>=0){                    console.log("Text!!")                    console.log(newData[key])                    selectedComp.item.layer(1).property("Source Text").setValue(newData[key])                }		     }	     }else if(key.indexOf('location')>=0){		     	     }	          }//end for          //render content     //process content for render     clearRenderQueue();     var UV_OUT = comps.byName('UV_OUT')     if(UV_OUT){	     //app.project.renderQueue.items.add(UV_OUT.item);	     	     //var renderObject = app.project.renderQueue.item(1);         //renderObject.outputModule(1).file = new File(opts.output)         //will not actually render file here         //make all changes and then render         //-compapp.project.renderQueue.render()              }else{	     console.log('no UV_OUT')	     return false     }         closeCurrentProject(true);    return true; }